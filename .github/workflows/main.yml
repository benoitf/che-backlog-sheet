name: update_spreadsheet

on:
  push:
    branches: [ main ]
  schedule:
      - cron: '*/20 * * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: setup spreadsheet token
        env:
          CREDENTIALS_JSON_CONTENT: ${{ secrets.CREDENTIALS_JSON_CONTENT }} 
          TOKEN_JSON_CONTENT: ${{ secrets.TOKEN_JSON_CONTENT }} 
        run: |
          echo "${CREDENTIALS_JSON_CONTENT}" > credentials.json
          echo "${TOKEN_JSON_CONTENT}" > token.json
      - name: build and run
        env:
          HUBOT_GITHUB_PUSH_TOKEN: ${{ secrets.HUBOT_GITHUB_PUSH_TOKEN }}
          HUBOT_GITHUB_TOKEN: ${{ secrets.HUBOT_GITHUB_TOKEN }}
          MATTERMOST_GROUP: ${{ secrets.MATTERMOST_GROUP }}
          MATTERMOST_HOST: ${{ secrets.MATTERMOST_HOST }}
          MATTERMOST_PASSWORD: ${{ secrets.MATTERMOST_PASSWORD }}
          MATTERMOST_USER: ${{ secrets.MATTERMOST_USER }}
          REDHAT_JIRA_TOKEN: ${{ secrets.REDHAT_JIRA_TOKEN }}
        run: |
          yarn
          yarn run compile
          node scripts/main.js
#      - name: Start SSH via ngrok
#        uses: P3TERX/ssh2actions@main
#        with:
#          mode: ngrok
#        env:
#          NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
#          NGROK_REGION: eu
#          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
#      - name: wait
#        run: sleep 4h
#        shell: bash
